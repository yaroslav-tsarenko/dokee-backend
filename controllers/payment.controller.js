const crypto = require('crypto');
const axios = require('axios');
const Order = require('../models/order.model.js');
const sendEmail = require('../utils/sendEmail');
const fs = require('fs');
const path = require('path');
const util = require('util');
const unlinkAsync = util.promisify(fs.unlink);
const FormData = require('form-data');

const WAYFORPAY_SECRET_KEY = process.env.WAYFORPAY_SECRET_KEY;
const merchantAccount = process.env.NEXT_PUBLIC_WAYFORPAY_MERCHANT_ACCOUNT;
const TELEGRAM_BOT_TOKEN = process.env.BOT_TOKEN;
const TELEGRAM_CHANNEL_ID = process.env.CHANNEL_ID;

// controllers/payment.controller.js

async function sendOrderToTelegram(order) {
    const samples = order.selectedSamples || [];
    const files = order.uploadedFiles || [];

    // —Ä–∞—Ö—É—î–º–æ —Å—É–º—É
    let totalPrice = 0;

    let message = `<b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥</b>\n\n`;
    message += `<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ:</b> ${order.orderReference || "-"}\n`;
    message += `<b>–ú–æ–≤–Ω–∞ –ø–∞—Ä–∞:</b> ${order.localLanguagePair || `${order.fromLanguage} ‚Üí ${order.toLanguage}`}\n`;
    message += `<b>–¢–∞—Ä–∏—Ñ:</b> ${order.tariff || "-"}\n`;

    message += `\n<b>–î–æ–∫—É–º–µ–Ω—Ç–∏:</b>\n`;

    for (const s of samples) {
        const fallbackPrice = pickPriceForSample(s, order.toLanguage, order.tariff);
        const priceToShow = (s.computedPrice ?? fallbackPrice);
        if (priceToShow) totalPrice += priceToShow;

        message += `\nüìÑ <b>${s.docName || "–î–æ–∫—É–º–µ–Ω—Ç"}</b>\n`;
        message += `–ù–∞–∑–≤–∞: ${s.sampleTitle || "-"}\n`;
        message += `–ú–æ–≤–Ω–∞ –ø–∞—Ä–∞: ${order.localLanguagePair || "-"}\n`;
        message += `–¢–∞—Ä–∏—Ñ: ${order.tariff || "-"}\n`;
        message += `–í–∞—Ä—Ç—ñ—Å—Ç—å: ${priceToShow != null ? priceToShow : "-"} ‚Ç∏\n`;
        message += `–§–Ü–û –ª–∞—Ç–∏–Ω–∏—Ü–µ—é: ${s.fioLatin || "-"}\n`;
        message += `–ü–µ—á–∞—Ç–∫–∞: ${s.sealText || "-"}\n`;
        message += `–®—Ç–∞–º–ø: ${s.stampText || "-"}\n`;
    }

    // –≤–∏–≤–æ–¥–∏–º–æ –ø—ñ—Å–ª—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É
    message = message.replace(
        `<b>–¢–∞—Ä–∏—Ñ:</b> ${order.tariff || "-"}`,
        `<b>–¢–∞—Ä–∏—Ñ:</b> ${order.tariff || "-"}\n<b>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</b> ${totalPrice} ‚Ç∏`
    );

    if (order.selectedDate) {
        message += `\n\n<b>–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:</b> ${order.selectedDate}\n`;
    }

    // --- –û—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try {
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHANNEL_ID,
            text: message.trim(),
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
        console.log('‚úÖ Telegram message sent');
    } catch (err) {
        console.error('‚ùå Telegram message error:', err?.response?.data || err.message);
    }

    // --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª—ñ–≤
    for (const file of files) {
        const filePath = path.join(__dirname, '../files', file.name);
        try {
            if (fs.existsSync(filePath)) {
                const form = new FormData();
                form.append('chat_id', TELEGRAM_CHANNEL_ID);
                form.append('caption', `üìé ${file.name}`);
                form.append('document', fs.createReadStream(filePath));

                await axios.post(
                    `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`,
                    form,
                    { headers: form.getHeaders() }
                );
                console.log('üì§ Telegram local file sent:', file.name);

                await unlinkAsync(filePath); // üóë –≤–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            } else if (file.cdnUrl) {
                await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, {
                    chat_id: TELEGRAM_CHANNEL_ID,
                    document: file.cdnUrl,
                    caption: `üìé ${file.name}`
                });
                console.log('üì§ Telegram CDN file sent:', file.cdnUrl);
            } else {
                console.warn('‚ö†Ô∏è File not found for Telegram:', file.name);
            }
        } catch (err) {
            console.error('‚ùå Telegram document error:', file.name, err?.response?.data || err.message);
        }
    }
}






function generateStatusSignature(merchantAccount, orderReference) {
    const signatureString = `${merchantAccount};${orderReference}`;
    return crypto
        .createHmac('md5', WAYFORPAY_SECRET_KEY)
        .update(signatureString)
        .digest('hex');
}

// ‚îÄ‚îÄ –¥–æ–¥–∞–π –º–∞–ø—É –Ω–∞–∑–≤ ‚Üí ISO-–∫–æ–¥–∏
const toLangMap = {
    '—Ä—É—Å—Å–∫–∏–π':'ru','–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':'en','—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π':'uk','–Ω–µ–º–µ—Ü–∫–∏–π':'de','–ø–æ–ª—å—Å–∫–∏–π':'pl',
    '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π':'fr','–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π':'it','–∏—Å–ø–∞–Ω—Å–∫–∏–π':'es','–ª–∏—Ç–æ–≤—Å–∫–∏–π':'lt','–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π':'pt',
    '—á–µ—à—Å–∫–∏–π':'cz','—Å–ª–æ–≤–∞—Ü–∫–∏–π':'sk','—ç—Å—Ç–æ–Ω—Å–∫–∏–π':'et','–ª–∞—Ç—ã—à—Å–∫–∏–π':'lv','–≥—Ä–µ—á–µ—Å–∫–∏–π':'el','—è–ø–æ–Ω—Å–∫–∏–π':'ja',
    '–∫–∏—Ç–∞–π—Å–∫–∏–π':'zh','–∫–æ—Ä–µ–π—Å–∫–∏–π':'ko','—Ç—É—Ä–µ—Ü–∫–∏–π':'tr','–∫–∞–∑–∞—Ö—Å–∫–∏–π':'kk','—É–∑–±–µ–∫—Å–∫–∏–π':'uz',
    '—Ä—É–º—ã–Ω—Å–∫–∏–π':'ro','–±–æ–ª–≥–∞—Ä—Å–∫–∏–π':'bg','–≤–µ–Ω–≥–µ—Ä—Å–∫–∏–π':'hu','—Å–ª–æ–≤–µ–Ω—Å–∫–∏–π':'sl','—Ñ–∏–Ω—Å–∫–∏–π':'fi','—à–≤–µ–¥—Å–∫–∏–π':'sv',
    '–¥–∞—Ç—Å–∫–∏–π':'da','–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π':'no','–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π':'nl','–∞—Ä–º—è–Ω—Å–∫–∏–π':'hy','–≥—Ä—É–∑–∏–Ω—Å–∫–∏–π':'ka','–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π':'az',
    // –º–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    'cz':'cz','cs':'cs','ua':'uk'
};

function norm(s='') {
    return String(s).trim().toLowerCase().replace(/[\s,_-]+/g,'');
}
function toIso(raw='') {
    const n = norm(raw);
    // —è–∫—â–æ —Ü–µ –≤–∂–µ –∫–æ–¥ (en, de, uk, ‚Ä¶) ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
    if (/^[a-z]{2,3}$/.test(n)) {
        if (n === 'ua') return 'uk';
        return n;
    }
    // —è–∫—â–æ —Ü–µ –Ω–∞–∑–≤–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) ‚Äî –º–∞–ø–∏–º–æ
    return toLangMap[n] || n;
}
function groupOf(code='') {
    // –≥—Ä—É–ø–∏ –≤ —Ç–≤–æ—ó—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
    if (['fr','it','es'].includes(code)) return 'fr_it_es';
    if (['pl','cz','cs'].includes(code)) return 'pl_cz';
    if (['lt','pt'].includes(code))      return 'lt_pt';
    return code;
}

exports.checkWayforpayStatus = async (req, res) => {
    try {
        const { order_ref } = req.body;

        let order;
        if (!order_ref) {
            order = await Order.findOne().sort({ createdAt: -1 });
        } else {
            order = await Order.findOne({ orderReference: order_ref });
            if (!order) {
                order = await Order.findOne().sort({ createdAt: -1 });
            }
        }

        if (!order) return res.status(404).json({ error: 'No orders found' });

        // üöÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email + Telegram
        await sendOrderEmail(order);
        await sendOrderToTelegram(order);

        // –î–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤ WayForPay
        if (order_ref) {
            const signature = generateStatusSignature(merchantAccount, order_ref);
            const response = await axios.post('https://api.wayforpay.com/api', {
                apiVersion: 1,
                transactionType: 'CHECK_STATUS',
                merchantAccount,
                orderReference: order_ref,
                merchantSignature: signature
            }, { headers: { 'Content-Type': 'application/json' } });

            return res.json(response.data);
        }

        return res.status(200).json({ success: true, message: 'Order sent to email + Telegram' });
    } catch (error) {
        console.error('WayForPay status check error:', error?.response?.data || error.message);
        return res.status(500).json({ error: 'Failed to check payment status' });
    }
};


function pickPriceForSample(sample, toLanguage, tariff) {
    if (!sample || !Array.isArray(sample.languageTariffs)) return null;
    const toCode = toIso(toLanguage);
    const key = (tariff || 'normal').toLowerCase();
    const candidates = [ groupOf(toCode), toCode ];
    const found = sample.languageTariffs.find(t => norm(t.language||'') === norm(candidates[0]) || norm(t.language||'') === norm(candidates[1]));
    if (!found) return null;
    const val = Number(found[key]);
    return Number.isFinite(val) ? val : null;
}

async function sendOrderEmail(order) {
    const samples = order.selectedSamples || [];
    let totalPrice = 0;

    let html = `<h2>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥</h2>
<p><b>–ú–æ–≤–Ω–∞ –ø–∞—Ä–∞:</b> ${order.localLanguagePair || `${order.fromLanguage} ‚Üí ${order.toLanguage}`}</p>
<p><b>–¢–∞—Ä–∏—Ñ:</b> ${order.tariff || "-"}</p>`;

    if (order.selectedDate) html += `<p><b>–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:</b> ${order.selectedDate}</p>`;
    html += `<hr/>`;

    for (const s of samples) {
        const fallbackPrice = pickPriceForSample(s, order.toLanguage, order.tariff);
        const priceToShow = (s.computedPrice ?? fallbackPrice);
        if (priceToShow) totalPrice += priceToShow;

        html += `
<h3>${s.docName || "–î–æ–∫—É–º–µ–Ω—Ç"}</h3>
<b>–î–æ–∫—É–º–µ–Ω—Ç:</b> ${s.sampleTitle || "-"}<br/>
<b>–ú–æ–≤–Ω–∞ –ø–∞—Ä–∞:</b> ${order.localLanguagePair || "-"}<br/>
<b>–¢–∞—Ä–∏—Ñ:</b> ${order.tariff || "-"}<br/>
<b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> ${priceToShow != null ? priceToShow : "-"} ‚Ç∏<br/>
<b>–§–Ü–û –ª–∞—Ç–∏–Ω–∏—Ü–µ—é:</b> ${s.fioLatin || "-"}<br/>
<b>–ü–µ—á–∞—Ç–∫–∞:</b> ${s.sealText || "-"}<br/>
<b>–®—Ç–∞–º–ø:</b> ${s.stampText || "-"}<br/>
<hr/>`;
    }

    // –≤–∏–≤–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É
    html = `<p><b>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</b> ${totalPrice} ‚Ç∏</p>` + html;

    const attachments = [];
    for (const file of order.uploadedFiles || []) {
        const filePath = path.join(__dirname, '../files', file.name);
        if (fs.existsSync(filePath)) {
            attachments.push({
                filename: file.name,
                content: fs.readFileSync(filePath)
            });
        }
    }

    await sendEmail(
        "dokee.pro@gmail.com",
        "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥",
        "",
        attachments.length ? attachments : undefined,
        html
    );
}




// –Ü—Å–Ω—É—é—á–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –æ–ø–ª–∞—Ç–∏
function generateSignature(fields) {
    const signatureFields = [
        'merchantAccount',
        'merchantDomainName',
        'orderReference',
        'orderDate',
        'amount',
        'currency',
        'productName',
        'productCount',
        'productPrice'
    ];

    const values = signatureFields.map((key) => {
        const value = fields[key];
        if (Array.isArray(value)) {
            return value.join(';');
        }
        return value;
    });

    const signatureString = values.join(';');
    return crypto.createHmac('md5', WAYFORPAY_SECRET_KEY)
        .update(signatureString)
        .digest('hex');
}

exports.generateWayforpaySignature = (req, res) => {
    try {
        const {
            merchantAccount,
            merchantDomainName,
            orderReference,
            orderDate,
            amount,
            currency,
            productName,
            productCount,
            productPrice
        } = req.body;

        if (
            !merchantAccount || !merchantDomainName || !orderReference ||
            !orderDate || !amount || !currency ||
            !productName || !productCount || !productPrice
        ) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        const signature = generateSignature({
            merchantAccount,
            merchantDomainName,
            orderReference,
            orderDate,
            amount,
            currency,
            productName,
            productCount,
            productPrice
        });

        return res.json({ signature });
    } catch (err) {
        console.error('Signature generation error:', err);
        return res.status(500).json({ error: 'Internal server error' });
    }
};
